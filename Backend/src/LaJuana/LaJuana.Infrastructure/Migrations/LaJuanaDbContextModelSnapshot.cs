// <auto-generated />
using System;
using LaJuana.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaJuana.Infrastructure.Migrations
{
    [DbContext(typeof(LaJuanaDbContext))]
    partial class LaJuanaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("LaJuana.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("City")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 9)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 9)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("LaJuana.Domain.CommunicationChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("CommunicationChannels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CommunicationChannel");
                });

            modelBuilder.Entity("LaJuana.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("LaJuana.Domain.PersonTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TagId");

                    b.ToTable("PersonTags");
                });

            modelBuilder.Entity("LaJuana.Domain.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("LaJuana.Domain.RelationshipDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsNeutral")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RelationshipID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RelationshipTypeID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonID");

                    b.HasIndex("RelationshipID");

                    b.HasIndex("RelationshipTypeID");

                    b.ToTable("RelationshipDetails");
                });

            modelBuilder.Entity("LaJuana.Domain.RelationshipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FemaleDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaleDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NeutralDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RelationshipTypeRequiredID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipTypeRequiredID")
                        .IsUnique();

                    b.ToTable("RelationshipTypes");
                });

            modelBuilder.Entity("LaJuana.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagCategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("LaJuana.Domain.TagCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TagCategories");
                });

            modelBuilder.Entity("LaJuana.Domain.Mail", b =>
                {
                    b.HasBaseType("LaJuana.Domain.CommunicationChannel");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Mail");
                });

            modelBuilder.Entity("LaJuana.Domain.Organization", b =>
                {
                    b.HasBaseType("LaJuana.Domain.Person");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("LaJuana.Domain.People", b =>
                {
                    b.HasBaseType("LaJuana.Domain.Person");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PronounPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("People");
                });

            modelBuilder.Entity("LaJuana.Domain.Phone", b =>
                {
                    b.HasBaseType("LaJuana.Domain.CommunicationChannel");

                    b.Property<string>("PhoneDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Phone");
                });

            modelBuilder.Entity("LaJuana.Domain.Address", b =>
                {
                    b.HasOne("LaJuana.Domain.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LaJuana.Domain.CommunicationChannel", b =>
                {
                    b.HasOne("LaJuana.Domain.Person", "Person")
                        .WithMany("CommunicationChannels")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LaJuana.Domain.PersonTag", b =>
                {
                    b.HasOne("LaJuana.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaJuana.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaJuana.Domain.RelationshipDetail", b =>
                {
                    b.HasOne("LaJuana.Domain.Person", "Person")
                        .WithMany("RelationshipDetails")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaJuana.Domain.Relationship", "Relationship")
                        .WithMany("RelationshipDetails")
                        .HasForeignKey("RelationshipID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LaJuana.Domain.RelationshipType", "RelationshipType")
                        .WithMany("RelationshipDetails")
                        .HasForeignKey("RelationshipTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Relationship");

                    b.Navigation("RelationshipType");
                });

            modelBuilder.Entity("LaJuana.Domain.RelationshipType", b =>
                {
                    b.HasOne("LaJuana.Domain.RelationshipType", "RelationshipTypeRequired")
                        .WithOne()
                        .HasForeignKey("LaJuana.Domain.RelationshipType", "RelationshipTypeRequiredID");

                    b.Navigation("RelationshipTypeRequired");
                });

            modelBuilder.Entity("LaJuana.Domain.Tag", b =>
                {
                    b.HasOne("LaJuana.Domain.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("LaJuana.Domain.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CommunicationChannels");

                    b.Navigation("RelationshipDetails");
                });

            modelBuilder.Entity("LaJuana.Domain.Relationship", b =>
                {
                    b.Navigation("RelationshipDetails");
                });

            modelBuilder.Entity("LaJuana.Domain.RelationshipType", b =>
                {
                    b.Navigation("RelationshipDetails");
                });

            modelBuilder.Entity("LaJuana.Domain.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
